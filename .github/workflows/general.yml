name: Rust

on: [pull_request, push]

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: onnxruntime=debug,onnxruntime-sys=debug
  RUST_BACKTRACE: 1

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  download:
    name: Download prebuilt ONNX Runtime archive from build.rs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup target install x86_64-unknown-linux-gnu
      - run: rustup target install x86_64-apple-darwin
      - run: rustup target install i686-pc-windows-msvc
      - run: rustup target install x86_64-pc-windows-msvc
      # ******************************************************************
      - name: Download prebuilt archive (CPU, x86_64-unknown-linux-gnu)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target x86_64-unknown-linux-gnu
      - name: Verify prebuilt archive downloaded (CPU, x86_64-unknown-linux-gnu)
        run: ls -lh target/x86_64-unknown-linux-gnu/debug/build/onnxruntime-sys-*/out/onnxruntime-linux-x64-1.*.tgz
      # ******************************************************************
      - name: Download prebuilt archive (CPU, x86_64-apple-darwin)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target x86_64-apple-darwin
      - name: Verify prebuilt archive downloaded (CPU, x86_64-apple-darwin)
        run: ls -lh target/x86_64-apple-darwin/debug/build/onnxruntime-sys-*/out/onnxruntime-osx-x64-1.*.tgz
      # ******************************************************************
      - name: Download prebuilt archive (CPU, i686-pc-windows-msvc)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target i686-pc-windows-msvc
      - name: Verify prebuilt archive downloaded (CPU, i686-pc-windows-msvc)
        run: ls -lh target/i686-pc-windows-msvc/debug/build/onnxruntime-sys-*/out/onnxruntime-win-x86-1.*.zip
      # ******************************************************************
      - name: Download prebuilt archive (CPU, x86_64-pc-windows-msvc)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --target x86_64-pc-windows-msvc
      - name: Verify prebuilt archive downloaded (CPU, x86_64-pc-windows-msvc)
        run: ls -lh target/x86_64-pc-windows-msvc/debug/build/onnxruntime-sys-*/out/onnxruntime-win-x64-1.*.zip
      # ******************************************************************
      - name: Download prebuilt archive (GPU, x86_64-unknown-linux-gnu)
        uses: actions-rs/cargo@v1
        env:
          ORT_USE_CUDA: "yes"
        with:
          command: build
          args: --target x86_64-unknown-linux-gnu
      - name: Verify prebuilt archive downloaded (GPU, x86_64-unknown-linux-gnu)
        run: ls -lh target/x86_64-unknown-linux-gnu/debug/build/onnxruntime-sys-*/out/onnxruntime-linux-x64-gpu-1.*.tgz
      # ******************************************************************
      - name: Download prebuilt archive (GPU, x86_64-pc-windows-msvc)
        uses: actions-rs/cargo@v1
        env:
          ORT_USE_CUDA: "yes"
        with:
          command: build
          args: --target x86_64-pc-windows-msvc
      - name: Verify prebuilt archive downloaded (GPU, x86_64-pc-windows-msvc)
        run: ls -lh target/x86_64-pc-windows-msvc/debug/build/onnxruntime-sys-*/out/onnxruntime-win-gpu-x64-1.*.zip

  rust-test:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2019
          - os: windows-2022
          - os: macos-10.15
          - os: macos-11
          - os: macos-12
          - os: ubuntu-18.04
          - os: ubuntu-20.04
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@32c4866ebb71e0949e8833eb49beeebed48532bd
        if: matrix.os == 'windows-2019'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.os == 'windows-2019'
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v1
        with:
          # cargoのキャシュが原因でテストが失敗してることが考えられる場合はバージョン部分を変更する
          key: "v1-cargo-test-cache-${{ matrix.os }}"
      - run: cargo test -vv

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - run: rustup component add clippy
      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Build (required to download libonnxruntime)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --package onnxruntime-sys
      - name: Copy libonnxruntime.*.dylib to /usr/lib/
        run: sudo cp -r target/debug/build/onnxruntime-sys-*/out/onnxruntime/onnxruntime-*/lib/libonnxruntime.* /usr/lib/
      - name: Run cargo-tarpaulin
        uses: actions-rs/tarpaulin@v0.1
        with:
          args: "--ignore-tests"
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1
        with:
          token: ${{secrets.CODECOV_TOKEN}}
      - name: Archive code coverage results
        uses: actions/upload-artifact@v1
        with:
          name: code-coverage-report
          path: cobertura.xml
